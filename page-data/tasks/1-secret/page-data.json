{"componentChunkName":"component---src-templates-docs-js","path":"/tasks/1-secret","result":{"data":{"site":{"siteMetadata":{"title":"Azure Key Vault to Kubernetes","docsLocation":"https://github.com/SparebankenVest/akv4k8s-docs/tree/master/content/docs"}},"mdx":{"fields":{"id":"f1c68d74-e0a2-5d92-a3fd-de92435c2a45","title":"Get Secret","slug":"/tasks/1-secret"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Get Secret\",\n  \"metaTitle\": \"Secret\",\n  \"metaDescription\": \"Sync and inject secret from Azure Key Vault\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this section we will show how to:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get a secret from Azure Key Vault into Kubernetes\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Inject a secret from Azure Key Vault into a container\")), mdx(\"p\", null, \"These are typically mutually exclusive. You will want to do\\n(1) if you need the secret in Kubernetes, and (2) if you want\\nthe secret in your application. In theory you can have both,\\nbut we have not yet come across a good case for doing this.\"), mdx(\"p\", null, \"Requirements:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Controller must be installed in Kubernetes cluster.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A Azure Key Vault named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"akv2k8s-test\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A Secret object named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"my-secret\"), \" stored in Azure Key Vault\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Authentication and Authorization configured\")), mdx(\"h3\", null, \"Get secret from Azure Key Vault into a Kubernetes secret\"), mdx(\"p\", null, \"We start by creating a definition for the Azure Key Vault secret\\nwe want to sync:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"# secret-sync.yaml\\n\\napiVersion: spv.no/v1alpha1\\nkind: AzureKeyVaultSecret\\nmetadata:\\n  name: secret-sync \\n  namespace: default\\nspec:\\n  vault:\\n    name: akv2k8s-test # name of key vault\\n    object:\\n      name: my-secret # name of the akv object\\n      type: secret # akv object type\\n  output: \\n    secret: \\n      name: my-secret-from-akv # kubernetes secret name\\n      dataKey: secret-value # key to store object value in kubernetes secret\\n\")), mdx(\"p\", null, \"Apply to Kubernetes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ kubectl apply -f secret-sync.yaml\\nazurekeyvaultsecret.spv.no/secret-sync created\\n\")), mdx(\"p\", null, \"List AzureKeyVaultSecret's:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ kubectl -n default get akvs\\nNAME          VAULT          VAULT OBJECT   SECRET NAME   SYNCHED\\nsecret-sync   akv2k8s-test   my-secret \\n\")), mdx(\"h3\", null, \"Inject secret from Azure Key Vault into a container\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#get-secret-from-azure-key-vault-into-a-kubernetes-secret","title":"Get secret from Azure Key Vault into a Kubernetes secret"},{"url":"#inject-secret-from-azure-key-vault-into-a-container","title":"Inject secret from Azure Key Vault into a container"}]},"parent":{"relativePath":"tasks/1-secret.md"},"frontmatter":{"metaTitle":"Secret","metaDescription":"Sync and inject secret from Azure Key Vault"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authentication","title":"Authentication"}}},{"node":{"fields":{"slug":"/authorization","title":"Authorization"}}},{"node":{"fields":{"slug":"/components","title":"Components"}}},{"node":{"fields":{"slug":"/examples","title":"Examples"}}},{"node":{"fields":{"slug":"/how-it-works","title":"How it Works"}}},{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/reference","title":"Reference"}}},{"node":{"fields":{"slug":"/setup","title":"Setup"}}},{"node":{"fields":{"slug":"/tasks","title":"Tasks"}}},{"node":{"fields":{"slug":"/components/1-controller","title":"Controller"}}},{"node":{"fields":{"slug":"/components/2-env-injector","title":"Env Injector"}}},{"node":{"fields":{"slug":"/components/3-when-to-use-which","title":"When to use which?"}}},{"node":{"fields":{"slug":"/tasks/0-prerequisites","title":"Prerequisites"}}},{"node":{"fields":{"slug":"/tasks/1-secret","title":"Get Secret"}}},{"node":{"fields":{"slug":"/tasks/2-certificate","title":"Get Certificate"}}},{"node":{"fields":{"slug":"/tasks/3-multi-value-secret","title":"Get Multi Value Secret"}}},{"node":{"fields":{"slug":"/tasks/4-signing-key","title":"Get Signing Key"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"f1c68d74-e0a2-5d92-a3fd-de92435c2a45"}}}