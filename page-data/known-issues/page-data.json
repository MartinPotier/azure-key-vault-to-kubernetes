{"componentChunkName":"component---src-templates-docs-js","path":"/known-issues","result":{"data":{"site":{"siteMetadata":{"title":"Azure Key Vault to Kubernetes","docsLocation":"https://github.com/SparebankenVest/azure-key-vault-to-kubernetes/tree/master/docs/content"}},"mdx":{"fields":{"id":"8da965d6-7482-5ee3-94fe-2410e811b28d","title":"Known Issues","slug":"/known-issues"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Known Issues\",\n  \"metaTitle\": \"Known Issues\",\n  \"metaDescription\": \"A list of known issues and available solutions or workarounds\",\n  \"index\": 100\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Env Injector - x509: certificate signed by unknown authority\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Issue:\"), \" Trying to inject secrets into a application running on a container without CA certificates will fail with an error like below:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"level=fatal msg=\\\"env-injector: failed to read secret 'test', error azure.BearerAuthorizer#WithAuthorization: Failed to refresh the Token for request to https://my-key-vault.vault.azure.net/secrets/test/?api-version=2016-10-01: StatusCode=0 -- Original Error: adal: Failed to execute the refresh request. Error = 'Post https://login.microsoftonline.com/xxx/oauth2/token?api-version=1.0: x509: certificate signed by unknown authority'\\\"\")), mdx(\"p\", null, \"Doing HTTPS calls without CA certificates will make it impossible for the client to validate if a TLS certificate is signed by a trusted CA.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Solution:\"), \" Make sure CA certificates are installed in the Docker image used by the container you are trying to inject env vars into (eg. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"apt-get install -y ca-certificates\"), \")\"), mdx(\"h3\", null, \"Env injector - failed calling webhook\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Issue:\"), \" Trying to install the Env Injector in the same namespace as you intend to use it might fail with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Error creating: Internal error occurred: failed calling webhook \\\"pods.azure-key-vault-env-injector.admission.spv.no\\\": Post https://azure-key-vault-env-injector.some-namespace.svc:443/pods?timeout=30s: dial tcp 10.1.1.124:443: connect: connection refused\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Solution:\"), \" Make sure to install Env Injector into its own dedicated namespace, and NOT label namespace with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"azure-key-vault-env-injection: enabled\"), \". This label is ONLY intended for namespaces where Env Injector is going to inject secrets, not where Env Injector is installed.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#env-injector---x509-certificate-signed-by-unknown-authority","title":"Env Injector - x509: certificate signed by unknown authority"},{"url":"#env-injector---failed-calling-webhook","title":"Env injector - failed calling webhook"}]},"parent":{"relativePath":"known-issues.md"},"frontmatter":{"metaTitle":"Known Issues","metaDescription":"A list of known issues and available solutions or workarounds","index":100}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authentication","title":"Authentication"},"frontmatter":{"index":30}}},{"node":{"fields":{"slug":"/authorization","title":"Authorization"},"frontmatter":{"index":40}}},{"node":{"fields":{"slug":"/components","title":"Components"},"frontmatter":{"index":20}}},{"node":{"fields":{"slug":"/examples","title":"Examples"},"frontmatter":{"index":60}}},{"node":{"fields":{"slug":"/how-it-works","title":"How it Works"},"frontmatter":{"index":80}}},{"node":{"fields":{"slug":"/","title":"Introduction"},"frontmatter":{"index":1}}},{"node":{"fields":{"slug":"/installation","title":"Installation"},"frontmatter":{"index":10}}},{"node":{"fields":{"slug":"/known-issues","title":"Known Issues"},"frontmatter":{"index":100}}},{"node":{"fields":{"slug":"/reference","title":"Reference"},"frontmatter":{"index":70}}},{"node":{"fields":{"slug":"/troubleshooting","title":"Troubleshooting"},"frontmatter":{"index":90}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"},"frontmatter":{"index":50}}},{"node":{"fields":{"slug":"/components/1-controller","title":"Controller"},"frontmatter":{"index":21}}},{"node":{"fields":{"slug":"/components/2-env-injector","title":"Env Injector"},"frontmatter":{"index":22}}},{"node":{"fields":{"slug":"/components/3-when-to-use-which","title":"When to use which?"},"frontmatter":{"index":23}}},{"node":{"fields":{"slug":"/tutorials/0-prerequisites","title":"Prerequisites"},"frontmatter":{"index":51}}},{"node":{"fields":{"slug":"/tutorials/1-secret","title":"Get Secret"},"frontmatter":{"index":52}}},{"node":{"fields":{"slug":"/tutorials/2-certificate","title":"Get Certificate"},"frontmatter":{"index":53}}},{"node":{"fields":{"slug":"/tutorials/3-signing-key","title":"Get Signing Key"},"frontmatter":{"index":54}}},{"node":{"fields":{"slug":"/tutorials/4-multi-value-secret","title":"Get Multi Value Secret"},"frontmatter":{"index":55}}},{"node":{"fields":{"slug":"/tutorials/5-env-injector-pfx-certificate","title":"Inject PFX Certificate"},"frontmatter":{"index":56}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8da965d6-7482-5ee3-94fe-2410e811b28d"}}}