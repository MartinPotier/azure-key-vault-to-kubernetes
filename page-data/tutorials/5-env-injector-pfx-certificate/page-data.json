{"componentChunkName":"component---src-templates-docs-js","path":"/tutorials/5-env-injector-pfx-certificate","result":{"data":{"site":{"siteMetadata":{"title":"Azure Key Vault to Kubernetes","docsLocation":"https://github.com/SparebankenVest/azure-key-vault-to-kubernetes/tree/master/docs/content"}},"mdx":{"fields":{"id":"fe61a87b-39c8-5619-9b5c-83adbcce7349","title":"Inject PFX Certificate","slug":"/tutorials/5-env-injector-pfx-certificate"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Inject PFX Certificate\",\n  \"metaTitle\": \"Inject PFX Certificate\",\n  \"metaDescription\": \"Tutorial covering how to directly inject PFX certificates into a container as a base64 encoded environment variable.\",\n  \"index\": 56\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Inject PFX Certficiate\"), mdx(\"p\", null, \"The certificate handling in certain languages like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"X509Certificate2\"), \" library has a\\npreference for certificates in the binary PFX format. This toturial is a step by step\\ninstruction on how to inject PFX certificates using the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Azure Key Vault Env Injector\"), \".\"), mdx(\"p\", null, \"Requirements:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Env Injector must be installed in Kubernetes cluster.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An Azure Key Vault named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"akv2k8s-test\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Authentication and authorization configured.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We are working in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"akv-test\"), \" namespace which requires the label \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"azure-key-vault-env-injection: enabled\"), \" for Env Injection.\")), mdx(\"p\", null, \"Start by uploading your certificate to Azure Key Vault. If you don't have one\\nyou can create a self signed certificate using the portal or Azure CLI. We use\\nthe name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my-certificate\"), \". For more information please see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/cli/azure/keyvault/certificate?view=azure-cli-latest#az-keyvault-certificate-create\"\n  }), \"Azure CLI Key\\nVault reference\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ az keyvault certificate create --vault-name akv2k8s-test --name my-certificate -p \\\"$(az keyvault certificate get-default-policy)\\\"\\n\")), mdx(\"p\", null, \"The following AzureKeyVaultSecret specification can be used as a base to retrive\\nyour certificate. As long as the object type is set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"secret\"), \", we will tell\\nAzure Key Vault to output a PFX formatted certificate with private key included.\\nAlso notice that there is no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"output\"), \" section in this AzureKeyVaultSecret as we\\nwill use the Env Injector to inject the certificate at runtime.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"# secret-cert.yaml\\n\\napiVersion: spv.no/v1alpha1\\nkind: AzureKeyVaultSecret\\nmetadata:\\n  name: secret-cert\\n  namespace: akv-test\\nspec:\\n  vault:\\n    name: akv2k8s-test # name of key vault\\n    object:\\n      name: my-certificate #  name of the certificate in akv\\n      type: secret # using type as secret exports pfx with private key\\n\")), mdx(\"p\", null, \"Apply the secret to Kubernetes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ kubectl apply -f secret-cert.yaml\\nazurekeyvaultsecret.spv.no/secret-cert created\\n\")), mdx(\"p\", null, \"We can now test that the certificate injection is working properly by creating a\\npod with the following environment variables. Note that even though the Env\\nInjector is tested with numerous container configurations, there is a\\nrequirement to have valid certificate chains installed on the container. This\\npackage is called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ca-certificates\"), \" inn almost all Linux distributions.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"# pod.yaml\\n\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: akv-test-app\\n  namespace: akv-test\\n  labels:\\n    app: akv-test-app\\nspec:\\n  containers:\\n  - name: akv-test-app\\n    image: circleci/node:lts-buster # we use an image that has `ca-certificates` installed.\\n    env:\\n    - name: MESSAGE\\n      value: \\\"Hello from akv2k8s.io! Here is your certificate:\\\"\\n    - name: CERTIFICATE\\n      value: secret-cert@azurekeyvault # we refer to the secret by the Env Injector convention <name of secret>@azurekeyvault\\n    command: [\\\"printenv\\\"]\\n    args: [\\\"MESSAGE\\\", \\\"CERTIFICATE\\\"]\\n\")), mdx(\"p\", null, \"Create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"akv-test-app\"), \" pod in Kubernetes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ kubectl apply -f pod.yaml\\n\\nazurekeyvaultsecret.spv.no/secret-cert created\\n\")), mdx(\"p\", null, \"Fetch the logs from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"akv-test-app\"), \" pod:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ kubectl -n akv-test logs akv-test-app\\n\\nlevel=info msg=\\\"starting process /usr/bin/printenv [printenv MESSAGE CERTIFICATE]\\\"\\nHello from akv2k8s.io! Here is your certificate:\\nMIIKRAIBAzCCCgQGCSqGSIb3DQEHAaCCCfUEggnxMIIJ7TCCBg4GCSqGSIb3DQEHAaCCBf8EggX7MIIF9zCCBfMGCyqGSIb3DQEMCgECoIIE9jCCBPI\\n<base64 data snipped for readability>\\n81DA3MB8wBwYFKw4DAhoEFAKs60G2Xo3i5SdjjGTSEfG586O9BBSXZcH2ukRQjnIT//44DpX0y7+OKA==\\n\")), mdx(\"p\", null, \"Delete the Pod to clean up:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ kubectl -n akv-test delete pod akv-test-app\\n\\npod \\\"akv-test-app\\\" deleted\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#inject-pfx-certficiate","title":"Inject PFX Certficiate"}]},"parent":{"relativePath":"tutorials/5-env-injector-pfx-certificate.md"},"frontmatter":{"metaTitle":"Inject PFX Certificate","metaDescription":"Tutorial covering how to directly inject PFX certificates into a container as a base64 encoded environment variable.","index":56}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authentication","title":"Authentication"},"frontmatter":{"index":30}}},{"node":{"fields":{"slug":"/authorization","title":"Authorization"},"frontmatter":{"index":40}}},{"node":{"fields":{"slug":"/components","title":"Components"},"frontmatter":{"index":20}}},{"node":{"fields":{"slug":"/examples","title":"Examples"},"frontmatter":{"index":60}}},{"node":{"fields":{"slug":"/how-it-works","title":"How it Works"},"frontmatter":{"index":80}}},{"node":{"fields":{"slug":"/","title":"Introduction"},"frontmatter":{"index":1}}},{"node":{"fields":{"slug":"/installation","title":"Installation"},"frontmatter":{"index":10}}},{"node":{"fields":{"slug":"/known-issues","title":"Known Issues"},"frontmatter":{"index":100}}},{"node":{"fields":{"slug":"/reference","title":"Reference"},"frontmatter":{"index":70}}},{"node":{"fields":{"slug":"/troubleshooting","title":"Troubleshooting"},"frontmatter":{"index":90}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"},"frontmatter":{"index":50}}},{"node":{"fields":{"slug":"/components/1-controller","title":"Controller"},"frontmatter":{"index":21}}},{"node":{"fields":{"slug":"/components/2-env-injector","title":"Env Injector"},"frontmatter":{"index":22}}},{"node":{"fields":{"slug":"/tutorials/0-prerequisites","title":"Prerequisites"},"frontmatter":{"index":51}}},{"node":{"fields":{"slug":"/components/3-when-to-use-which","title":"When to use which?"},"frontmatter":{"index":23}}},{"node":{"fields":{"slug":"/tutorials/1-secret","title":"Get Secret"},"frontmatter":{"index":52}}},{"node":{"fields":{"slug":"/tutorials/2-certificate","title":"Get Certificate"},"frontmatter":{"index":53}}},{"node":{"fields":{"slug":"/tutorials/3-signing-key","title":"Get Signing Key"},"frontmatter":{"index":54}}},{"node":{"fields":{"slug":"/tutorials/4-multi-value-secret","title":"Get Multi Value Secret"},"frontmatter":{"index":55}}},{"node":{"fields":{"slug":"/tutorials/5-env-injector-pfx-certificate","title":"Inject PFX Certificate"},"frontmatter":{"index":56}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"fe61a87b-39c8-5619-9b5c-83adbcce7349"}}}