{"componentChunkName":"component---src-templates-docs-js","path":"/tutorials/1-secret","result":{"data":{"site":{"siteMetadata":{"title":"Azure Key Vault to Kubernetes","docsLocation":"https://github.com/SparebankenVest/azure-key-vault-to-kubernetes/tree/master/docs/content"}},"mdx":{"fields":{"id":"bc669ef4-6795-5a6d-9131-6141676c2af2","title":"Get Secret","slug":"/tutorials/1-secret"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Get Secret\",\n  \"metaTitle\": \"Get Secret\",\n  \"metaDescription\": \"Tutorial covering how to get a secret from Azure Key Vault into Kubernetes, either as a native Kubernetes secret or directly injected into a container.\",\n  \"index\": 52\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note: The \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/tutorials/0-prerequisites\"\n  }), \"prerequisites\"), \" are required to complete this tutorial.\")), mdx(\"p\", null, \"This tutorial will cover how to:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get a secret from Azure Key Vault into Kubernetes\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Inject a secret from Azure Key Vault into a container\")), mdx(\"p\", null, \"These are typically mutually exclusive. You will want to do\\n(1) if you need the secret in Kubernetes, and (2) if you want\\nthe secret in your application. In theory you can have both,\\nbut we have not yet come across a good case for doing this.\"), mdx(\"p\", null, \"Requirements:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Controller must be installed in Kubernetes cluster.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An Azure Key Vault named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"akv2k8s-test\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A Secret object named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"my-secret\"), \" stored in Azure Key Vault\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Authentication and Authorization configured\")), mdx(\"h3\", null, \"Get secret from Azure Key Vault into a Kubernetes secret\"), mdx(\"p\", null, \"We start by creating a definition for the Azure Key Vault secret\\nwe want to sync:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"# secret-sync.yaml\\n\\napiVersion: spv.no/v1alpha1\\nkind: AzureKeyVaultSecret\\nmetadata:\\n  name: secret-sync \\n  namespace: default\\nspec:\\n  vault:\\n    name: akv2k8s-test # name of key vault\\n    object:\\n      name: my-secret # name of the akv object\\n      type: secret # akv object type\\n  output: \\n    secret: \\n      name: my-secret-from-akv # kubernetes secret name\\n      dataKey: secret-value # key to store object value in kubernetes secret\\n\")), mdx(\"p\", null, \"Apply to Kubernetes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ kubectl apply -f secret-sync.yaml\\nazurekeyvaultsecret.spv.no/secret-sync created\\n\")), mdx(\"p\", null, \"List AzureKeyVaultSecret's:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ kubectl -n default get akvs\\nNAME          VAULT          VAULT OBJECT   SECRET NAME   SYNCHED\\nsecret-sync   akv2k8s-test   my-secret \\n\")), mdx(\"h3\", null, \"Inject secret from Azure Key Vault into a container\"), mdx(\"p\", null, \"We start by creating a definition for the Azure Key Vault secret\\nwe want to inject into our Pod:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"# secret-inject.yaml\\n\\napiVersion: spv.no/v1alpha1\\nkind: AzureKeyVaultSecret\\nmetadata:\\n  name: secret-inject\\n  namespace: akv-test\\nspec:\\n  vault:\\n    name: akv2k8s-test # name of key vault\\n    object:\\n      name: my-secret # name of the akv object\\n      type: secret # akv object type\\n\")), mdx(\"p\", null, \"Apply to Kubernetes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ kubectl apply -f secret-inject.yaml\\nazurekeyvaultsecret.spv.no/secret-inject created\\n\")), mdx(\"p\", null, \"Then we deploy a Pod having a env-variable pointing to the secret above.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"# deployment.yaml\\n\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: akv2k8s-test-injection\\n  namespace: akv-test\\n  labels:\\n    app: akv2k8s-test-injection\\nspec:\\n  selector:\\n    matchLabels:\\n      app: akv2k8s-test-injection\\n  template:\\n    metadata:\\n      labels:\\n        app: akv2k8s-test-injection\\n    spec:\\n      containers:\\n      - name: akv2k8s-env-test\\n        image: spvest/akv2k8s-env-test\\n        env:\\n        - name: TEST_SECRET\\n          value: \\\"secret-inject@azurekeyvault\\\"\\n        - name: ENV_INJECTOR_LOG_LEVEL\\n          value: debug\\n\")), mdx(\"p\", null, \"Apply to Kubernetes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ kubectl apply -f deployment.yaml\\nazurekeyvaultsecret.spv.no/secret-inject created\\n\")), mdx(\"p\", null, \"Things to note from the Deployment yaml above:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"containers:\\n  - name: akv2k8s-env-test\\n    image: spvest/akv2k8s-env-test # 1.\\n    env:\\n    - name: TEST_SECRET # 2.\\n      value: \\\"secret-inject@azurekeyvault\\\" # 3.\\n    - name: ENV_INJECTOR_LOG_LEVEL # 3.\\n      value: debug\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We use a custom built Docker image that only outputs the content of the env-variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TEST_SECRET\"), \" to the console. Feel free to replace this with your own Docker image.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The env-variable this Docker image expects and will output. When using your own Docker image, set the env-variables your image expects using convention in 3.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We use the akv2k8s injector convention to reference the AzureKeyVaultSecret \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"secret-inject\"), \" we created earlier (\", \"[akvs-name]\", \"@azurekeyvault). The env-injector will download this secret from Azure Key Vault and inject into the executable running in your Container.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A optional env-variable you can pass to your container to set the log-level of the env-injector and optionally get detailed log output during startup of your pod.\"))), mdx(\"p\", null, \"To see the log output from your Pod, execute the following command:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubectl -n akv-test logs deployment/akv2k8s-test-injection\")), mdx(\"h3\", null, \"Cleanup\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#get-secret-from-azure-key-vault-into-a-kubernetes-secret","title":"Get secret from Azure Key Vault into a Kubernetes secret"},{"url":"#inject-secret-from-azure-key-vault-into-a-container","title":"Inject secret from Azure Key Vault into a container"},{"url":"#cleanup","title":"Cleanup"}]},"parent":{"relativePath":"tutorials/1-secret.md"},"frontmatter":{"metaTitle":"Get Secret","metaDescription":"Tutorial covering how to get a secret from Azure Key Vault into Kubernetes, either as a native Kubernetes secret or directly injected into a container.","index":52}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authentication","title":"Authentication"},"frontmatter":{"index":30}}},{"node":{"fields":{"slug":"/authorization","title":"Authorization"},"frontmatter":{"index":40}}},{"node":{"fields":{"slug":"/components","title":"Components"},"frontmatter":{"index":20}}},{"node":{"fields":{"slug":"/examples","title":"Examples"},"frontmatter":{"index":60}}},{"node":{"fields":{"slug":"/how-it-works","title":"How it Works"},"frontmatter":{"index":80}}},{"node":{"fields":{"slug":"/","title":"Introduction"},"frontmatter":{"index":1}}},{"node":{"fields":{"slug":"/installation","title":"Installation"},"frontmatter":{"index":10}}},{"node":{"fields":{"slug":"/known-issues","title":"Known Issues"},"frontmatter":{"index":100}}},{"node":{"fields":{"slug":"/reference","title":"Reference"},"frontmatter":{"index":70}}},{"node":{"fields":{"slug":"/troubleshooting","title":"Troubleshooting"},"frontmatter":{"index":90}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"},"frontmatter":{"index":50}}},{"node":{"fields":{"slug":"/components/1-controller","title":"Controller"},"frontmatter":{"index":21}}},{"node":{"fields":{"slug":"/components/2-env-injector","title":"Env Injector"},"frontmatter":{"index":22}}},{"node":{"fields":{"slug":"/tutorials/0-prerequisites","title":"Prerequisites"},"frontmatter":{"index":51}}},{"node":{"fields":{"slug":"/components/3-when-to-use-which","title":"When to use which?"},"frontmatter":{"index":23}}},{"node":{"fields":{"slug":"/tutorials/1-secret","title":"Get Secret"},"frontmatter":{"index":52}}},{"node":{"fields":{"slug":"/tutorials/2-certificate","title":"Get Certificate"},"frontmatter":{"index":53}}},{"node":{"fields":{"slug":"/tutorials/3-signing-key","title":"Get Signing Key"},"frontmatter":{"index":54}}},{"node":{"fields":{"slug":"/tutorials/4-multi-value-secret","title":"Get Multi Value Secret"},"frontmatter":{"index":55}}},{"node":{"fields":{"slug":"/tutorials/5-env-injector-pfx-certificate","title":"Inject PFX Certificate"},"frontmatter":{"index":56}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"bc669ef4-6795-5a6d-9131-6141676c2af2"}}}