{"componentChunkName":"component---src-templates-docs-js","path":"/examples","result":{"data":{"site":{"siteMetadata":{"title":"Azure Key Vault to Kubernetes","docsLocation":"https://github.com/SparebankenVest/azure-key-vault-to-kubernetes/tree/master/docs/content"}},"mdx":{"fields":{"id":"c266295e-63bc-50fd-8665-1e7412a94e30","title":"Examples","slug":"/examples"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Examples\",\n  \"metaTitle\": \"examples\",\n  \"metaDescription\": \"See different examples of how akv2k8s can be used.\",\n  \"index\": 60\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Plain secret\"), mdx(\"p\", null, \"Define a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AzureKeyVaultSecret\"), \" resource:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: spv.no/v1alpha1\\nkind: AzureKeyVaultSecret\\nmetadata:\\n  name: my-first-azure-keyvault-secret\\n  namespace: default\\nspec:\\n  vault:\\n    name: my-kv # name of key vault\\n    object:\\n      type: secret # object type\\n      name: test-secret # name of the object\\n  output: # Only needed by the Controller\\n    secret:\\n      name: keyvault-secret\\n      dataKey: azuresecret # key to store object value in kubernetes secret\\n\")), mdx(\"p\", null, \"If the Controller is installed the following Kubernetes Secret will be created:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: v1\\ndata:\\n  azuresecret: YXNkZmFzZGZhc2Rm\\nkind: Secret\\nmetadata:\\n  name: keyvault-secret\\n  namespace: default\\ntype: opaque\\n\")), mdx(\"p\", null, \"If Env Injector is installed, inject secret by referencing the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AzureKeyVaultSecret\"), \" above using a replacement marker (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<AzureKeyVaultSecret>@azurekeyvault\"), \")`:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"...\\ncontainers:\\n  - name: alpine\\n    env:\\n    - name: MY_SECRET\\n      value: my-first-azure-keyvault-env-secret@azurekeyvault\\n...\\n\")), mdx(\"h3\", null, \"Certificate with exportable key\"), mdx(\"p\", null, \"Define a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AzureKeyVaultSecret\"), \" resource:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: spv.no/v1alpha1\\nkind: AzureKeyVaultSecret\\nmetadata:\\n  name: my-first-azure-keyvault-certificate\\n  namespace: default\\nspec:\\n  vault:\\n    name: my-kv\\n    object:\\n      type: certificate\\n      name: test-cert\\n  output: # Only needed by the Controller\\n    secret:\\n      name: keyvault-certificate\\n      type: kubernetes.io/tls\\n\")), mdx(\"p\", null, \"If Controller is installed the following Kubernetes Secret will be created:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: v1\\ndata:\\n  tls.crt: ...\\n  tls.key: ...\\nkind: Secret\\nmetadata:\\n  name: keyvault-certificate\\n  namespace: default\\ntype: kubernetes.io/tls\\n\")), mdx(\"p\", null, \"Note that since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spec.output.secret.type=kubernetes.io/tls\"), \" a Kubernetes Secret of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubernetes.io/tls\"), \" was created.\"), mdx(\"p\", null, \"If Env Injector is installed, inject secret by referencing the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AzureKeyVaultSecret\"), \" above using a replacement marker (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"azurekeyvault@<AzureKeyVaultSecret>\"), \") and query (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"?\"), \") to point to private/public key:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"...\\ncontainers:\\n  - name: alpine\\n    env:\\n    - name: PUBLIC_KEY\\n      value: my-first-azure-keyvault-env-certificate@azurekeyvault?tls.crt\\n    - name: PRIVATE_KEY\\n      value: my-first-azure-keyvault-env-certificate@azurekeyvault?tls.key\\n...\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#plain-secret","title":"Plain secret"},{"url":"#certificate-with-exportable-key","title":"Certificate with exportable key"}]},"parent":{"relativePath":"examples.md"},"frontmatter":{"metaTitle":"examples","metaDescription":"See different examples of how akv2k8s can be used."}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authorization","title":"Authorization"}}},{"node":{"fields":{"slug":"/components","title":"Components"}}},{"node":{"fields":{"slug":"/examples","title":"Examples"}}},{"node":{"fields":{"slug":"/how-it-works","title":"How it Works"}}},{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/authentication","title":"Authentication"}}},{"node":{"fields":{"slug":"/installation","title":"Installation"}}},{"node":{"fields":{"slug":"/reference","title":"Reference"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/components/1-controller","title":"Controller"}}},{"node":{"fields":{"slug":"/components/2-env-injector","title":"Env Injector"}}},{"node":{"fields":{"slug":"/components/3-when-to-use-which","title":"When to use which?"}}},{"node":{"fields":{"slug":"/tutorials/0-prerequisites","title":"Prerequisites"}}},{"node":{"fields":{"slug":"/tutorials/1-secret","title":"Get Secret"}}},{"node":{"fields":{"slug":"/tutorials/2-certificate","title":"Get Certificate"}}},{"node":{"fields":{"slug":"/tutorials/3-multi-value-secret","title":"Get Multi Value Secret"}}},{"node":{"fields":{"slug":"/tutorials/4-signing-key","title":"Get Signing Key"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"c266295e-63bc-50fd-8665-1e7412a94e30"}}}