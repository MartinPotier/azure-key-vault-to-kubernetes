{"componentChunkName":"component---src-templates-docs-js","path":"/authorization","result":{"data":{"site":{"siteMetadata":{"title":"Azure Key Vault to Kubernetes","docsLocation":"https://github.com/SparebankenVest/azure-key-vault-to-kubernetes/tree/master/docs/content"}},"mdx":{"fields":{"id":"dad04c2e-0a14-5825-9d84-3a3fa7186c59","title":"Authorization","slug":"/authorization"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Authorization\",\n  \"metaTitle\": \"Authorization\",\n  \"metaDescription\": \"Learn how to set the proper access rights to access Azure Key Vault secrets from Kubernetes.\",\n  \"index\": 40\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"No matter which authentication option is used, the authenticated account will need \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \" permissions to the different object types in Azure Key Vault.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note: It's only possible to control access at the top level of Azure Key Vault, not per object/resource. The recommendation is therefore to have a dedicated Key Vault per cluster.\")), mdx(\"p\", null, \"Access is controlled through Azure Key Vault policies and can be configured through Azure CLI like this:\"), mdx(\"p\", null, \"Azure Key Vault Secrets:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\"\n  }), \"az keyvault set-policy \\\\\\n  -n <azure key vault name> \\\\\\n  --secret-permissions get \\\\\\n  --spn <service principal id> \\\\ \\n  --subscription <azure subscription>\\n\")), mdx(\"p\", null, \"Azure Key Vault Certificates:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\"\n  }), \"az keyvault set-policy \\\\\\n  -n <azure key vault name> \\\\\\n  --certificate-permissions get \\\\\\n  --spn <service principal id> \\\\\\n  --subscription <azure subscription>\\n\")), mdx(\"p\", null, \"Azure Key Vault Keys:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\"\n  }), \"az keyvault set-policy \\\\\\n  -n <azure key vault name> \\\\\\n  --key-permissions get \\\\\\n  --spn <service principal id> \\\\\\n  --subscription <azure subscription>\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note: The Env Injector needs to be anabled for each namespace\")), mdx(\"p\", null, \"The Env Injector is developed using a Mutating Admission Webhook that triggers just before every Pod gets created. To allow cluster administrators some control over which Pods this Webhook gets triggered for, it must be enabled per namespace using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"azure-key-vault-env-injection\"), \" label, like in the example below:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: v1\\nkind: Namespace\\nmetadata:\\n  name: akv-test\\n  labels:\\n    azure-key-vault-env-injection: enabled\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"parent":{"relativePath":"authorization.md"},"frontmatter":{"metaTitle":"Authorization","metaDescription":"Learn how to set the proper access rights to access Azure Key Vault secrets from Kubernetes.","index":40}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authentication","title":"Authentication"},"frontmatter":{"index":30}}},{"node":{"fields":{"slug":"/authorization","title":"Authorization"},"frontmatter":{"index":40}}},{"node":{"fields":{"slug":"/components","title":"Components"},"frontmatter":{"index":20}}},{"node":{"fields":{"slug":"/examples","title":"Examples"},"frontmatter":{"index":60}}},{"node":{"fields":{"slug":"/how-it-works","title":"How it Works"},"frontmatter":{"index":80}}},{"node":{"fields":{"slug":"/","title":"Introduction"},"frontmatter":{"index":1}}},{"node":{"fields":{"slug":"/installation","title":"Installation"},"frontmatter":{"index":10}}},{"node":{"fields":{"slug":"/known-issues","title":"Known Issues"},"frontmatter":{"index":100}}},{"node":{"fields":{"slug":"/reference","title":"Reference"},"frontmatter":{"index":70}}},{"node":{"fields":{"slug":"/troubleshooting","title":"Troubleshooting"},"frontmatter":{"index":90}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"},"frontmatter":{"index":50}}},{"node":{"fields":{"slug":"/components/1-controller","title":"Controller"},"frontmatter":{"index":21}}},{"node":{"fields":{"slug":"/components/2-env-injector","title":"Env Injector"},"frontmatter":{"index":22}}},{"node":{"fields":{"slug":"/components/3-when-to-use-which","title":"When to use which?"},"frontmatter":{"index":23}}},{"node":{"fields":{"slug":"/tutorials/0-prerequisites","title":"Prerequisites"},"frontmatter":{"index":51}}},{"node":{"fields":{"slug":"/tutorials/1-secret","title":"Get Secret"},"frontmatter":{"index":52}}},{"node":{"fields":{"slug":"/tutorials/2-certificate","title":"Get Certificate"},"frontmatter":{"index":53}}},{"node":{"fields":{"slug":"/tutorials/3-signing-key","title":"Get Signing Key"},"frontmatter":{"index":54}}},{"node":{"fields":{"slug":"/tutorials/4-multi-value-secret","title":"Get Multi Value Secret"},"frontmatter":{"index":55}}},{"node":{"fields":{"slug":"/tutorials/5-env-injector-pfx-certificate","title":"Inject PFX Certificate"},"frontmatter":{"index":null}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"dad04c2e-0a14-5825-9d84-3a3fa7186c59"}}}