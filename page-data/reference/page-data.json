{"componentChunkName":"component---src-templates-docs-js","path":"/reference","result":{"data":{"site":{"siteMetadata":{"title":"Azure Key Vault to Kubernetes","docsLocation":"https://github.com/SparebankenVest/azure-key-vault-to-kubernetes/tree/master/docs/content"}},"mdx":{"fields":{"id":"604de119-d271-5687-9b0d-b34e5a373736","title":"Reference","slug":"/reference"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Reference\",\n  \"metaTitle\": \"Reference\",\n  \"metaDescription\": \"See the complete reference and options for all akv2k8s resources.\",\n  \"index\": 70\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"The AzureKeyVaultSecret resource\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AzureKeyVaultSecret\"), \" is defined using this schema:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: spv.no/v1alpha1\\nkind: AzureKeyVaultSecret\\nmetadata:\\n  name: < name for azure key vault secret>\\n  namespace: <namespace for azure key vault secret>\\nspec:\\n  vault:\\n    name: <name of azure key vault>\\n    object:\\n      name: <name of azure key vault object to sync>\\n      type: <object type in azure key vault to sync>\\n      version: <optional - version of object to sync>\\n      contentType: <only used when type is the special multi-key-value-secret - either application/x-json or application/x-yaml>\\n  output: # ignored by env injector, required by controller to output kubernetes secret\\n    secret: \\n      name: <name of the kubernetes secret to create>\\n      dataKey: <required when type is opaque - name of the kubernetes secret data key to assign value to - ignored for all other types>\\n      type: <optional - kubernetes secret type - defaults to opaque>\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note - the \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output\"), \" is only used by the Controller to create the Azure Key Vault secret as a Kubernetes native Secret - it is ignored and not needed by the Env Injector.\")), mdx(\"h4\", null, \"Vault object types\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Object type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"secret\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Azure Key Vault Secret - can contain any secret data\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"certificate\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Azure Key Vault Certificate - A TLS certificate with just the public key or both public and private key if exportable\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"key\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Azure Key Vault Key - A RSA or EC key used for signing\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"multi-key-value-secret\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"A special kind of Azure Key Vault Secret only understood by the Controller and the Env Injector. For cases where a secret contains \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"json\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"yaml\"), \" key/value items that will be directly exported as key/value items in the Kubernetes secret, or access with queries in the Evn Injector. When \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"multi-key-value-secret\"), \" type is used, the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"contentType\"), \" property MUST also be set to either \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"application/x-json\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"application/x-yaml\"), \".\")))), mdx(\"p\", null, \"See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#examples\"\n  }), \"Examples\"), \" for different usages.\"), mdx(\"h3\", null, \"The Controller\"), mdx(\"p\", null, \"Make sure the Controller is installed in the Kubernetes cluster, then:\"), mdx(\"p\", null, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AzureKeyVaultSecret\"), \" resources to synchronize into native Kubernetes secrets. Note that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"output\"), \" section is mandatory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"  output: \\n    secret: \\n      name: <required - name of the kubernetes secret to create>\\n      dataKey: <required when type is opaque - name of the kubernetes secret data key to assign value to - ignored for all other types>\\n      type: <optional - kubernetes secret type - defaults to opaque>\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note-1: Pods in Kubernetes currently do not get notifications when Secret resources change, and Pods will have to be re-created or use something like the Wave controller (\", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"https://github.com/pusher/wave\"\n  }), \"https://github.com/pusher/wave\"), \") to get the changes\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note-2: By default the Controller auto sync secrets every 10 minutes (configurable) and depending on how many secrets are synchronized can cause extra usage costs of Azure Key Vault.\")), mdx(\"h4\", null, \"Commonly used Kubernetes secret types\"), mdx(\"p\", null, \"The default secret type (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spec.output.secret.type\"), \") is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opaque\"), \". Below is a list of supported Kubernetes secret types and which keys each secret type stores.\"), mdx(\"p\", null, \"For a complete list: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/kubernetes/api/blob/49be0e3344fe443eb3d23105225ed2f1ab1e6cab/core/v1/types.go#L4950\"\n  }), \"https://github.com/kubernetes/api/blob/49be0e3344fe443eb3d23105225ed2f1ab1e6cab/core/v1/types.go#L4950\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Secret type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Keys\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"opaque\"), \" (default)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"defined in \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"spec.output.secret.dataKey\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"kubernetes.io/tls\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"tls.key\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"tls.crt\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"kubernetes.io/dockerconfigjson\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \".dockerconfigjson\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"kubernetes.io/dockercfg\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \".dockercfg\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"kubernetes.io/basic-auth\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"username\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"password\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"kubernetes.io/ssh-auth\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ssh-privatekey\"))))), mdx(\"p\", null, \"With the exception of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opaque\"), \" secret type, the Controller will make a best effort to export the Azure Key Vault object into the secret type defined.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"kubernetes.io/tls\")), mdx(\"p\", null, \"By pointing to a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"exportable\"), \" Certificate object in Azure Key Vault AND setting the Kubernetes output secret type to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubernetes.io/tls\"), \", the controller will automatically format the Kubernetes secret accordingly both for pem and pfx certificates.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"kubernetes.io/dockerconfigjson\")), mdx(\"p\", null, \"Requires a well formatted docker config stored in a Secret object like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"auths\\\": {\\n    \\\"some.azurecr.io\\\": {\\n      \\\"username\\\": \\\"someuser\\\",\\n      \\\"password\\\": \\\"somepassword\\\",\\n      \\\"email\\\": \\\"someuser@spv.no\\\",\\n      \\\"auth\\\": \\\"c29tZXVzZXI6c29tZXBhc3N3b3JkCg==\\\"\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"If the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"auth\\\"\"), \" property is not included, the controller will generate it.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"kubernetes.io/basic-auth\")), mdx(\"p\", null, \"The controller support two formats. Either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"username:password\"), \" or pre-encoded with base64: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dXNlcm5hbWU6cGFzc3dvcmQ=\"), \" stored in a Secret object.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"kubernetes.io/ssh-auth\")), mdx(\"p\", null, \"This must be a properly formatted \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Private\"), \" SSH Key stored in a Secret object.\"), mdx(\"h3\", null, \"The Env Injector\"), mdx(\"p\", null, \"Make sure the Env Injector is installed in the Kubernetes cluster, then:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Set the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"azure-key-vault-env-injection\"), \" label for the namespace(s) where the secret is going to be used\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AzureKeyVaultSecret\"), \" resources references secrets in Azure Key Vault\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Inject into applications using syntax below, referencing to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AzureKeyVaultSecret\"), \" in 2.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"env:\\n  - name: <name of environment variable>\\n    value: <name of AzureKeyVaultSecret>@azurekeyvault?<optional field query>\\n...\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#the-azurekeyvaultsecret-resource","title":"The AzureKeyVaultSecret resource","items":[{"url":"#vault-object-types","title":"Vault object types"}]},{"url":"#the-controller","title":"The Controller","items":[{"url":"#commonly-used-kubernetes-secret-types","title":"Commonly used Kubernetes secret types"}]},{"url":"#the-env-injector","title":"The Env Injector"}]},"parent":{"relativePath":"reference.md"},"frontmatter":{"metaTitle":"Reference","metaDescription":"See the complete reference and options for all akv2k8s resources.","index":70}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authentication","title":"Authentication"},"frontmatter":{"index":30}}},{"node":{"fields":{"slug":"/authorization","title":"Authorization"},"frontmatter":{"index":40}}},{"node":{"fields":{"slug":"/components","title":"Components"},"frontmatter":{"index":20}}},{"node":{"fields":{"slug":"/examples","title":"Examples"},"frontmatter":{"index":60}}},{"node":{"fields":{"slug":"/how-it-works","title":"How it Works"},"frontmatter":{"index":80}}},{"node":{"fields":{"slug":"/","title":"Introduction"},"frontmatter":{"index":1}}},{"node":{"fields":{"slug":"/installation","title":"Installation"},"frontmatter":{"index":10}}},{"node":{"fields":{"slug":"/known-issues","title":"Known Issues"},"frontmatter":{"index":100}}},{"node":{"fields":{"slug":"/reference","title":"Reference"},"frontmatter":{"index":70}}},{"node":{"fields":{"slug":"/troubleshooting","title":"Troubleshooting"},"frontmatter":{"index":90}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"},"frontmatter":{"index":50}}},{"node":{"fields":{"slug":"/components/1-controller","title":"Controller"},"frontmatter":{"index":21}}},{"node":{"fields":{"slug":"/components/2-env-injector","title":"Env Injector"},"frontmatter":{"index":22}}},{"node":{"fields":{"slug":"/components/3-when-to-use-which","title":"When to use which?"},"frontmatter":{"index":23}}},{"node":{"fields":{"slug":"/tutorials/0-prerequisites","title":"Prerequisites"},"frontmatter":{"index":51}}},{"node":{"fields":{"slug":"/tutorials/1-secret","title":"Get Secret"},"frontmatter":{"index":52}}},{"node":{"fields":{"slug":"/tutorials/2-certificate","title":"Get Certificate"},"frontmatter":{"index":53}}},{"node":{"fields":{"slug":"/tutorials/3-signing-key","title":"Get Signing Key"},"frontmatter":{"index":54}}},{"node":{"fields":{"slug":"/tutorials/4-multi-value-secret","title":"Get Multi Value Secret"},"frontmatter":{"index":55}}},{"node":{"fields":{"slug":"/tutorials/5-env-injector-pfx-certificate","title":"Inject PFX Certificate"},"frontmatter":{"index":null}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"604de119-d271-5687-9b0d-b34e5a373736"}}}